import streamlit as st
import pandas as pd
import numpy as np
import subprocess
import json

st.title("_Teen Obesity predictor app_")

st.write("This app uses a pre-trained machine learning model to predict the zbmi score and its label of children between the ages 2 through 13 at 14 years old." \
"Please take into consideration that the prediction might not be accurate and should always be reviewed by an expert (i.e. pediatrician).")

st.header("Data input form", divider = "grey")

st.subheader("Enter available Height (cm) and Weight (kg) data between ages 2 through 13.")

if "child_info" not in st.session_state:
    st.session_state.child_info = pd.DataFrame(columns=["Age", "Height_cm", "Weight_kg"])

# Create select box
if "child_sex" not in st.session_state:
    st.session_state.child_sex = pd.DataFrame(columns=["Sex"])

# Selectbox for one age only per submission
sex = st.selectbox("Enter child sex:", ["Unspecified", "Male", "Female"], index=0)
sex_if_default = sex if sex != "Unspecified" else "Male"
sex_df = pd.DataFrame({
        "Sex": [sex_if_default] *12
        })
st.session_state.child_sex = sex_df

# Create st.dataframe
Age = list(range(2, 14))
Height_cm = [None] * len(Age)
Weight_kg = [None] * len(Age)

child_df = pd.DataFrame({"Age": Age,
                       "Height_cm": Height_cm,
                       "Weight_kg": Weight_kg
                       })

edited_child_df = st.data_editor(child_df,
                               use_container_width=True,
                               height=457,
                               column_config={
                                   "Age": st.column_config.NumberColumn(disabled=True)
                                   })

# Fill child_info with edited data
st.session_state.child_info = edited_child_df.copy()

# Add Download button and combine data into single df
combined_data = pd.concat([st.session_state.child_sex, st.session_state.child_info], axis=1)

def convert_to_none(df):
    return df.applymap(lambda x: None if isinstance(x, str) and x.strip() == "" else x)

combined_data = convert_to_none(combined_data)

csv = combined_data.to_csv(index=False)
st.write("Download child data as CSV file (optional to keep your data)")
st.download_button("Download", data=csv, file_name="child_data.csv", mime="text/csv")

st.header("Zbmi Prediction at 14 years old")
if st.button("Predict"):
    json_data = combined_data.to_json(orient="records")
    
    with open("child_data.json", "w") as f:
        f.write(json_data)
    
    # For demonstration, you can show the JSON or pass it to a model
    st.json(json.loads(json_data))  # Pretty-print JSON in the app

    # If you plan to call a subprocess or model:
    # subprocess.run(...) or model.predict(...)

